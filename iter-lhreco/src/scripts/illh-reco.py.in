#!/bin/env python

import sys, os, glob, re, argparse
import datetime as dt
import random

#sys.path.append('/home/fmcnally/npx4')
from npx4.pysubmit import pysubmit

""" 
INSTRUCTIONS: before executing, change hardcoded paths anywhere you see 
the word 'CHANGE'.
"""




if __name__ == "__main__":

    p = argparse.ArgumentParser(
            description='Makes daily healpix maps using time-scrambling code')

    # Additional options
    p.add_argument('-o', '--outdir', dest='outdir',
            default='@CRA_BUILD@/maps',
            help='Destination directory for output files')
    p.add_argument('-i', '--indir', dest='indir',
            default='@CRA_BUILD@/maps',
            help='Destination directory for output files')
    p.add_argument('--test', dest='test',
            default=False, action='store_true',
            help='Option for running off cluster to test')
    p.add_argument('--overwrite', dest='overwrite',
            default=False, action='store_true',
            help='Option to overwrite existing map files')
    p.add_argument('--cvmfs', dest='cvmfs',
            default='@CVMFS_SROOTBASE@',
            help='CVMFS environment')
    p.add_argument('--submit_dir', dest='submit_dir',
            default='@CRA_BUILD@/submit-dir',
            help='submit directory')
    p.add_argument('--nside', dest='nsideout',
            default=64,
            help='Healpix NSide parameter')
    p.add_argument('--timesteps', dest='timesteps',
            default=360,
            help='Number of time steps')
    p.add_argument('--timestepmin', dest='timestepmin',
            default=0,
            help='First time step to use')
    p.add_argument('--timestepmax', dest='timestepmax',
            default=0,
            help='Last time step to use')
    p.add_argument('--iterations', dest='iterations',
            default=20,
            help='Number of iterations')
    p.add_argument('--lon', dest='lon',
            default=270,
            help='Longitude (degrees) of detector (270 for IceCube, -97 for HAWC')
    p.add_argument('--lat', dest='lat',
            default=-90,
            help='Latitude (degrees) of detector (-90 for IceCube, 19 for HAWC')
    p.add_argument('--detector', dest='detector',
            default='IceCube',
            help='Name of detector')


    ### USER-SPECIFIC PATHS (CHANGE) ###
    """ These paths all refer to directories. Make sure you create your
    own directories as needed """
    # Submitter capable of submitting multiple days as one job, w/
    # TimeScramble.cc reading filelist from .txt file.
    #  - determines .txt file location (can remove after jobs run) 
    

    args = p.parse_args()
    c_opts = vars(args).copy()
    s_opts = vars(args).copy()
    if not args.config:
        p.error('Detector configuration not given')

    # Base name for outfiles
    outBase = '{outdir}/{config}'.format(**c_opts)
    inBase = '{indir}/{config}'.format(**c_opts)
    if args.sundp:
       outBase += '_sd'
       inBase += '_sd'
    c_opts['outBase'] = outBase
    c_opts['inBase'] = inBase

    # Create output directories if they don't already exist
    if not os.path.isdir('{outBase}'.format(**c_opts)):
        print('Creating output directory {outBase}'.format(**c_opts))
        os.makedirs('{outBase}'.format(**c_opts))

    # Set up parameters to feed C++ script
    print('Parameters for submission:')
    validArgs  = ['nsideout']
    c_opts = {k:v for k,v in c_opts.items() if v!=None and k in validArgs}
    for key in sorted(c_opts.keys()):
        print('  --%s %s' % (key, c_opts[key]))
    c_opts = [['--'+key, c_opts[key]] for key in sorted(c_opts.keys())]
    # Python magic: flatten list of arbitrary depth into list of strings
    flatList = lambda *n: (str(e) for a in n \
            for e in (flatList(*a) if isinstance(a, (tuple, list)) else (a,)))
    c_opts = ' '.join(list(flatList(c_opts)))
    # Ebins need to go last (multitoken parameters)

    sublines = ["request_memory = 3000"]
    # Environment for script
    header = ['#!/bin/bash ']
    if args.cvmfs:
        header = ['#!/bin/sh','eval `' +args.cvmfs +'/setup.sh`']

    # Submit files
    if not os.path.isdir(args.submit_dir):
        os.makedirs(args.submit_dir)
    os.makedirs('{}/combined'.format(outBase))

    for degbin in range(0,360):

        # Filter by desired dates
        prefix = "CR_ICECUBE_LOCAL_{elogmin:.2f}-{elogmax:.2f}GeV_NSIDE{nsideout}_degbin-{degbin:02d}.fits.gz"
        if args.dates is None: 
            pattern = os.path.join(inBase,"*",infile).format(**s_opts,degbin=degbin)
            filelist = glob.glob(pattern)
            if not len(filelist):
               print(pattern,"does not exist!")
        else:
            filelist = []
            for date in runDates:
                f = os.path.join(inBase,date,infile).format(**s_opts,degbin=degbin)
                if os.path.exists(f):
                    filelist.append(f)
                else:
                    print("file",f,"does not exist!")
                    

        outfile = infile.format(**s_opts,degbin=degbin)
        jobID = 'combinelocalmaps_%s_%05i_%05i' % (args.config, degbin, random.randint(0,99999))
        cmd  = '@CRA_BUILD@/bin/combine-local-maps' 
        ex = [cmd, c_opts,'--outfile','{}/combined/{}'.format(outBase,outfile), '--input', " ".join(filelist) ]
        ex = ' '.join(ex)
        print(ex)
        print('')
        pysubmit(ex, sublines=sublines, test=args.test, jobID=jobID,
                outdir=args.submit_dir,
                header=header,
                condor_dag='{}/{}.combine-local-maps.dag'.format(args.submit_dir,args.config)
                )
